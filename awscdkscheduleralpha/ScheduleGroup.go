package awscdkscheduleralpha

import (
	_init_ "github.com/aws/aws-cdk-go/awscdkscheduleralpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdkscheduleralpha/v2/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// A Schedule Group.
//
// Example:
//   var target lambdaInvoke
//
//
//   scheduleGroup := awscdkscheduleralpha.NewScheduleGroup(this, jsii.String("ScheduleGroup"), &ScheduleGroupProps{
//   	ScheduleGroupName: jsii.String("MyScheduleGroup"),
//   })
//
//   awscdkscheduleralpha.NewSchedule(this, jsii.String("Schedule"), &ScheduleProps{
//   	Schedule: awscdkscheduleralpha.ScheduleExpression_Rate(awscdk.Duration_Minutes(jsii.Number(10))),
//   	Target: Target,
//   	ScheduleGroup: ScheduleGroup,
//   })
//
// Experimental.
type ScheduleGroup interface {
	awscdk.Resource
	IScheduleGroup
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The arn of the schedule group.
	// Experimental.
	ScheduleGroupArn() *string
	// The name of the schedule group.
	// Experimental.
	ScheduleGroupName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the indicated permissions on this schedule group to the given principal.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Grant delete schedule permission for schedules in this group to the given principal.
	// Experimental.
	GrantDeleteSchedules(identity awsiam.IGrantable) awsiam.Grant
	// Grant list and get schedule permissions for schedules in this group to the given principal.
	// Experimental.
	GrantReadSchedules(identity awsiam.IGrantable) awsiam.Grant
	// Grant create and update schedule permissions for schedules in this group to the given principal.
	// Experimental.
	GrantWriteSchedules(identity awsiam.IGrantable) awsiam.Grant
	// Return the given named metric for this schedule group.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for all invocation attempts.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricAttempts(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for dropped invocations when EventBridge Scheduler stops attempting to invoke the target after a schedule's retry policy has been exhausted.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricDropped(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for failed invocations that also failed to deliver to DLQ.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricFailedToBeSentToDLQ(errorCode *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for invocations delivered to the DLQ.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricSentToDLQ(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for delivery of failed invocations to DLQ when the payload of the event sent to the DLQ exceeds the maximum size allowed by Amazon SQS.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricSentToDLQTruncated(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Emitted when the target returns an exception after EventBridge Scheduler calls the target API.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricTargetErrors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for invocation failures due to API throttling by the target.
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricTargetThrottled(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the number of invocations that were throttled because it exceeds your service quotas.
	// See: https://docs.aws.amazon.com/scheduler/latest/UserGuide/scheduler-quotas.html
	//
	// Default: - sum over 5 minutes.
	//
	// Experimental.
	MetricThrottled(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for ScheduleGroup
type jsiiProxy_ScheduleGroup struct {
	internal.Type__awscdkResource
	jsiiProxy_IScheduleGroup
}

func (j *jsiiProxy_ScheduleGroup) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScheduleGroup) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScheduleGroup) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScheduleGroup) ScheduleGroupArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"scheduleGroupArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScheduleGroup) ScheduleGroupName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"scheduleGroupName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScheduleGroup) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewScheduleGroup(scope constructs.Construct, id *string, props *ScheduleGroupProps) ScheduleGroup {
	_init_.Initialize()

	if err := validateNewScheduleGroupParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_ScheduleGroup{}

	_jsii_.Create(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewScheduleGroup_Override(s ScheduleGroup, scope constructs.Construct, id *string, props *ScheduleGroupProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		[]interface{}{scope, id, props},
		s,
	)
}

// Import a default schedule group.
// Experimental.
func ScheduleGroup_FromDefaultScheduleGroup(scope constructs.Construct, id *string) IScheduleGroup {
	_init_.Initialize()

	if err := validateScheduleGroup_FromDefaultScheduleGroupParameters(scope, id); err != nil {
		panic(err)
	}
	var returns IScheduleGroup

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		"fromDefaultScheduleGroup",
		[]interface{}{scope, id},
		&returns,
	)

	return returns
}

// Import an external schedule group by ARN.
// Experimental.
func ScheduleGroup_FromScheduleGroupArn(scope constructs.Construct, id *string, scheduleGroupArn *string) IScheduleGroup {
	_init_.Initialize()

	if err := validateScheduleGroup_FromScheduleGroupArnParameters(scope, id, scheduleGroupArn); err != nil {
		panic(err)
	}
	var returns IScheduleGroup

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		"fromScheduleGroupArn",
		[]interface{}{scope, id, scheduleGroupArn},
		&returns,
	)

	return returns
}

// Import an existing schedule group with a given name.
// Experimental.
func ScheduleGroup_FromScheduleGroupName(scope constructs.Construct, id *string, scheduleGroupName *string) IScheduleGroup {
	_init_.Initialize()

	if err := validateScheduleGroup_FromScheduleGroupNameParameters(scope, id, scheduleGroupName); err != nil {
		panic(err)
	}
	var returns IScheduleGroup

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		"fromScheduleGroupName",
		[]interface{}{scope, id, scheduleGroupName},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func ScheduleGroup_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateScheduleGroup_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func ScheduleGroup_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateScheduleGroup_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func ScheduleGroup_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateScheduleGroup_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-scheduler-alpha.ScheduleGroup",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := s.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (s *jsiiProxy_ScheduleGroup) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := s.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) GetResourceNameAttribute(nameAttr *string) *string {
	if err := s.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := s.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		s,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) GrantDeleteSchedules(identity awsiam.IGrantable) awsiam.Grant {
	if err := s.validateGrantDeleteSchedulesParameters(identity); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		s,
		"grantDeleteSchedules",
		[]interface{}{identity},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) GrantReadSchedules(identity awsiam.IGrantable) awsiam.Grant {
	if err := s.validateGrantReadSchedulesParameters(identity); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		s,
		"grantReadSchedules",
		[]interface{}{identity},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) GrantWriteSchedules(identity awsiam.IGrantable) awsiam.Grant {
	if err := s.validateGrantWriteSchedulesParameters(identity); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		s,
		"grantWriteSchedules",
		[]interface{}{identity},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricAttempts(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricAttemptsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricAttempts",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricDropped(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricDroppedParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricDropped",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricFailedToBeSentToDLQ(errorCode *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricFailedToBeSentToDLQParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricFailedToBeSentToDLQ",
		[]interface{}{errorCode, props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricSentToDLQ(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricSentToDLQParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricSentToDLQ",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricSentToDLQTruncated(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricSentToDLQTruncatedParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricSentToDLQTruncated",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricTargetErrors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricTargetErrorsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricTargetErrors",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricTargetThrottled(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricTargetThrottledParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricTargetThrottled",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) MetricThrottled(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricThrottledParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricThrottled",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScheduleGroup) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


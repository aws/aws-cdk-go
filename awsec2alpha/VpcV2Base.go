package awsec2alpha

import (
	_init_ "github.com/aws/aws-cdk-go/awsec2alpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/aws-cdk-go/awsec2alpha/v2/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// Base class for creating a VPC (Virtual Private Cloud) in AWS.
//
// For more information, see the {@link https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Vpc.html AWS CDK Documentation on VPCs}.
// Experimental.
type VpcV2Base interface {
	awscdk.Resource
	IVpcV2
	// AZs for this VPC.
	// Experimental.
	AvailabilityZones() *[]*string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// If this is set to true, don't error out on trying to select subnets.
	// Experimental.
	IncompleteSubnetDefinition() *bool
	// Experimental.
	SetIncompleteSubnetDefinition(val *bool)
	// Dependable that can be depended upon to force internet connectivity established on the VPC.
	// Experimental.
	InternetConnectivityEstablished() constructs.IDependable
	// The primary IPv4 CIDR block associated with the VPC.
	//
	// Needed in order to validate the vpc range of subnet
	// current prop vpcCidrBlock refers to the token value
	// For more information, see the {@link https://docs.aws.amazon.com/vpc/latest/userguide/vpc-cidr-blocks.html#vpc-sizing-ipv4}.
	// Experimental.
	Ipv4CidrBlock() *string
	// List of isolated subnets in this VPC.
	// Experimental.
	IsolatedSubnets() *[]awsec2.ISubnet
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// List of private subnets in this VPC.
	// Experimental.
	PrivateSubnets() *[]awsec2.ISubnet
	// List of public subnets in this VPC.
	// Experimental.
	PublicSubnets() *[]awsec2.ISubnet
	// Secondary IPs for the VPC, can be multiple Ipv4 or Ipv6 Ipv4 should be within RFC#1918 range.
	// Experimental.
	SecondaryCidrBlock() *[]awsec2.CfnVPCCidrBlock
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Arn of this VPC.
	// Experimental.
	VpcArn() *string
	// CIDR range for this VPC.
	// Experimental.
	VpcCidrBlock() *string
	// Identifier for this VPC.
	// Experimental.
	VpcId() *string
	// Returns the id of the VPN Gateway (if enabled).
	// Experimental.
	VpnGatewayId() *string
	// Adds a new client VPN endpoint to this VPC.
	// Experimental.
	AddClientVpnEndpoint(id *string, options *awsec2.ClientVpnEndpointOptions) awsec2.ClientVpnEndpoint
	// Adds a new flow log to this VPC.
	// Experimental.
	AddFlowLog(id *string, options *awsec2.FlowLogOptions) awsec2.FlowLog
	// Adds a new gateway endpoint to this VPC.
	// Experimental.
	AddGatewayEndpoint(id *string, options *awsec2.GatewayVpcEndpointOptions) awsec2.GatewayVpcEndpoint
	// Adds a new interface endpoint to this VPC.
	// Experimental.
	AddInterfaceEndpoint(id *string, options *awsec2.InterfaceVpcEndpointOptions) awsec2.InterfaceVpcEndpoint
	// Adds a new VPN connection to this VPC.
	// Experimental.
	AddVpnConnection(id *string, options *awsec2.VpnConnectionOptions) awsec2.VpnConnection
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Adds a VPN Gateway to this VPC.
	// Experimental.
	EnableVpnGateway(options *awsec2.EnableVpnGatewayOptions)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Return the subnets appropriate for the placement strategy.
	// Experimental.
	SelectSubnetObjects(selection *awsec2.SubnetSelection) *[]awsec2.ISubnet
	// Return information on the subnets appropriate for the given selection strategy.
	//
	// Requires that at least one subnet is matched, throws a descriptive
	// error message otherwise.
	// Experimental.
	SelectSubnets(selection *awsec2.SubnetSelection) *awsec2.SelectedSubnets
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for VpcV2Base
type jsiiProxy_VpcV2Base struct {
	internal.Type__awscdkResource
	jsiiProxy_IVpcV2
}

func (j *jsiiProxy_VpcV2Base) AvailabilityZones() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"availabilityZones",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) IncompleteSubnetDefinition() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"incompleteSubnetDefinition",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) InternetConnectivityEstablished() constructs.IDependable {
	var returns constructs.IDependable
	_jsii_.Get(
		j,
		"internetConnectivityEstablished",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) Ipv4CidrBlock() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipv4CidrBlock",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) IsolatedSubnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"isolatedSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) PrivateSubnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"privateSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) PublicSubnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"publicSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) SecondaryCidrBlock() *[]awsec2.CfnVPCCidrBlock {
	var returns *[]awsec2.CfnVPCCidrBlock
	_jsii_.Get(
		j,
		"secondaryCidrBlock",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) VpcArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) VpcCidrBlock() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcCidrBlock",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) VpcId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VpcV2Base) VpnGatewayId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpnGatewayId",
		&returns,
	)
	return returns
}


// Experimental.
func NewVpcV2Base_Override(v VpcV2Base, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-ec2-alpha.VpcV2Base",
		[]interface{}{scope, id, props},
		v,
	)
}

func (j *jsiiProxy_VpcV2Base)SetIncompleteSubnetDefinition(val *bool) {
	if err := j.validateSetIncompleteSubnetDefinitionParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"incompleteSubnetDefinition",
		val,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func VpcV2Base_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateVpcV2Base_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-ec2-alpha.VpcV2Base",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func VpcV2Base_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateVpcV2Base_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-ec2-alpha.VpcV2Base",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func VpcV2Base_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateVpcV2Base_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-ec2-alpha.VpcV2Base",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) AddClientVpnEndpoint(id *string, options *awsec2.ClientVpnEndpointOptions) awsec2.ClientVpnEndpoint {
	if err := v.validateAddClientVpnEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.ClientVpnEndpoint

	_jsii_.Invoke(
		v,
		"addClientVpnEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) AddFlowLog(id *string, options *awsec2.FlowLogOptions) awsec2.FlowLog {
	if err := v.validateAddFlowLogParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.FlowLog

	_jsii_.Invoke(
		v,
		"addFlowLog",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) AddGatewayEndpoint(id *string, options *awsec2.GatewayVpcEndpointOptions) awsec2.GatewayVpcEndpoint {
	if err := v.validateAddGatewayEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.GatewayVpcEndpoint

	_jsii_.Invoke(
		v,
		"addGatewayEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) AddInterfaceEndpoint(id *string, options *awsec2.InterfaceVpcEndpointOptions) awsec2.InterfaceVpcEndpoint {
	if err := v.validateAddInterfaceEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.InterfaceVpcEndpoint

	_jsii_.Invoke(
		v,
		"addInterfaceEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) AddVpnConnection(id *string, options *awsec2.VpnConnectionOptions) awsec2.VpnConnection {
	if err := v.validateAddVpnConnectionParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.VpnConnection

	_jsii_.Invoke(
		v,
		"addVpnConnection",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := v.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		v,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (v *jsiiProxy_VpcV2Base) EnableVpnGateway(options *awsec2.EnableVpnGatewayOptions) {
	if err := v.validateEnableVpnGatewayParameters(options); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		v,
		"enableVpnGateway",
		[]interface{}{options},
	)
}

func (v *jsiiProxy_VpcV2Base) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		v,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := v.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		v,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) GetResourceNameAttribute(nameAttr *string) *string {
	if err := v.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		v,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) SelectSubnetObjects(selection *awsec2.SubnetSelection) *[]awsec2.ISubnet {
	if err := v.validateSelectSubnetObjectsParameters(selection); err != nil {
		panic(err)
	}
	var returns *[]awsec2.ISubnet

	_jsii_.Invoke(
		v,
		"selectSubnetObjects",
		[]interface{}{selection},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) SelectSubnets(selection *awsec2.SubnetSelection) *awsec2.SelectedSubnets {
	if err := v.validateSelectSubnetsParameters(selection); err != nil {
		panic(err)
	}
	var returns *awsec2.SelectedSubnets

	_jsii_.Invoke(
		v,
		"selectSubnets",
		[]interface{}{selection},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VpcV2Base) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		v,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


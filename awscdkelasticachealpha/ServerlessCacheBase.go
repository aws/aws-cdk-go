package awscdkelasticachealpha

import (
	_init_ "github.com/aws/aws-cdk-go/awscdkelasticachealpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awskms"
	"github.com/aws/aws-cdk-go/awscdkelasticachealpha/v2/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// Base class for ServerlessCache constructs.
// Experimental.
type ServerlessCacheBase interface {
	awscdk.Resource
	IServerlessCache
	// The ARNs of backups restored in the cache.
	// Experimental.
	BackupArnsToRestore() *[]*string
	// Access to network connections.
	// Experimental.
	Connections() awsec2.Connections
	// The cache engine used by this cache.
	// Experimental.
	Engine() CacheEngine
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The KMS key used for encryption.
	// Experimental.
	KmsKey() awskms.IKey
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The security groups associated with this cache.
	// Experimental.
	SecurityGroups() *[]awsec2.ISecurityGroup
	// The ARN of the serverless cache.
	// Experimental.
	ServerlessCacheArn() *string
	// The name of the serverless cache.
	// Experimental.
	ServerlessCacheName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// The subnets this cache is deployed in.
	// Experimental.
	Subnets() *[]awsec2.ISubnet
	// The user group associated with this cache.
	// Experimental.
	UserGroup() IUserGroup
	// The VPC this cache is deployed in.
	// Experimental.
	Vpc() awsec2.IVpc
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the given identity custom permissions.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Grant connect permissions to the cache.
	// Experimental.
	GrantConnect(grantee awsiam.IGrantable) awsiam.Grant
	// Return the given named metric for this cache.
	// Default: Average over 5 minutes.
	//
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for active connections.
	// Default: Maximum over 5 minutes.
	//
	// Experimental.
	MetricActiveConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for cache hit count.
	// Default: Sum over 5 minutes.
	//
	// Experimental.
	MetricCacheHitCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for cache hit rate.
	// Default: Average over 5 minutes.
	//
	// Experimental.
	MetricCacheHitRate(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for cache miss count.
	// Default: Sum over 5 minutes.
	//
	// Experimental.
	MetricCacheMissCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for data stored in the cache.
	// Default: Maximum over 5 minutes.
	//
	// Experimental.
	MetricDataStored(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for network bytes in.
	// Default: Sum over 5 minutes.
	//
	// Experimental.
	MetricNetworkBytesIn(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for network bytes out.
	// Default: Sum over 5 minutes.
	//
	// Experimental.
	MetricNetworkBytesOut(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for ECPUs consumed.
	// Default: Average over 5 minutes.
	//
	// Experimental.
	MetricProcessingUnitsConsumed(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for read request latency.
	// Default: Average over 5 minutes.
	//
	// Experimental.
	MetricReadRequestLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for write request latency.
	// Default: Average over 5 minutes.
	//
	// Experimental.
	MetricWriteRequestLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for ServerlessCacheBase
type jsiiProxy_ServerlessCacheBase struct {
	internal.Type__awscdkResource
	jsiiProxy_IServerlessCache
}

func (j *jsiiProxy_ServerlessCacheBase) BackupArnsToRestore() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"backupArnsToRestore",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Connections() awsec2.Connections {
	var returns awsec2.Connections
	_jsii_.Get(
		j,
		"connections",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Engine() CacheEngine {
	var returns CacheEngine
	_jsii_.Get(
		j,
		"engine",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) KmsKey() awskms.IKey {
	var returns awskms.IKey
	_jsii_.Get(
		j,
		"kmsKey",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) SecurityGroups() *[]awsec2.ISecurityGroup {
	var returns *[]awsec2.ISecurityGroup
	_jsii_.Get(
		j,
		"securityGroups",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) ServerlessCacheArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"serverlessCacheArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) ServerlessCacheName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"serverlessCacheName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Subnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"subnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) UserGroup() IUserGroup {
	var returns IUserGroup
	_jsii_.Get(
		j,
		"userGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ServerlessCacheBase) Vpc() awsec2.IVpc {
	var returns awsec2.IVpc
	_jsii_.Get(
		j,
		"vpc",
		&returns,
	)
	return returns
}


// Experimental.
func NewServerlessCacheBase_Override(s ServerlessCacheBase, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-elasticache-alpha.ServerlessCacheBase",
		[]interface{}{scope, id, props},
		s,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func ServerlessCacheBase_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateServerlessCacheBase_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-elasticache-alpha.ServerlessCacheBase",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func ServerlessCacheBase_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateServerlessCacheBase_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-elasticache-alpha.ServerlessCacheBase",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func ServerlessCacheBase_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateServerlessCacheBase_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-elasticache-alpha.ServerlessCacheBase",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := s.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (s *jsiiProxy_ServerlessCacheBase) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := s.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) GetResourceNameAttribute(nameAttr *string) *string {
	if err := s.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := s.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		s,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) GrantConnect(grantee awsiam.IGrantable) awsiam.Grant {
	if err := s.validateGrantConnectParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		s,
		"grantConnect",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricActiveConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricActiveConnectionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricActiveConnections",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricCacheHitCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricCacheHitCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricCacheHitCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricCacheHitRate(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricCacheHitRateParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricCacheHitRate",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricCacheMissCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricCacheMissCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricCacheMissCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricDataStored(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricDataStoredParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricDataStored",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricNetworkBytesIn(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricNetworkBytesInParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricNetworkBytesIn",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricNetworkBytesOut(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricNetworkBytesOutParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricNetworkBytesOut",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricProcessingUnitsConsumed(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricProcessingUnitsConsumedParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricProcessingUnitsConsumed",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricReadRequestLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricReadRequestLatencyParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricReadRequestLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) MetricWriteRequestLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := s.validateMetricWriteRequestLatencyParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		s,
		"metricWriteRequestLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ServerlessCacheBase) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


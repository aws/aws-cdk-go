package awscdkgameliftalpha

import (
	_init_ "github.com/aws/aws-cdk-go/awscdkgameliftalpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsgamelift"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
)

// A fleet contains Amazon Elastic Compute Cloud (Amazon EC2) instances that GameLift hosts.
//
// A fleet uses the configuration and scaling logic that you define to run your game server build. You can use a fleet directly without a queue.
// You can also associate multiple fleets with a GameLift queue.
//
// For example, you can use Spot Instance fleets configured with your preferred locations, along with a backup On-Demand Instance fleet with the same locations.
// Using multiple Spot Instance fleets of different instance types reduces the chance of needing On-Demand Instance placement.
//
// Example:
//   var build build
//
//   // Server processes can be delcared in a declarative way through the constructor
//   fleet := gamelift.NewBuildFleet(this, jsii.String("Game server fleet"), &BuildFleetProps{
//   	FleetName: jsii.String("test-fleet"),
//   	Content: build,
//   	InstanceType: ec2.InstanceType_Of(ec2.InstanceClass_C4, ec2.InstanceSize_LARGE),
//   	RuntimeConfiguration: &RuntimeConfiguration{
//   		ServerProcesses: []serverProcess{
//   			&serverProcess{
//   				LaunchPath: jsii.String("/local/game/GameLiftExampleServer.x86_64"),
//   				Parameters: jsii.String("-logFile /local/game/logs/myserver1935.log -port 1935"),
//   				ConcurrentExecutions: jsii.Number(100),
//   			},
//   		},
//   	},
//   })
//
// Experimental.
type BuildFleet interface {
	FleetBase
	IBuildFleet
	// The build content of the fleet.
	// Experimental.
	Content() IBuild
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The ARN of the fleet.
	// Experimental.
	FleetArn() *string
	// The Identifier of the fleet.
	// Experimental.
	FleetId() *string
	// The principal this GameLift fleet is using.
	// Experimental.
	GrantPrincipal() awsiam.IPrincipal
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The ARN to put into the destination field of a game session queue.
	// Experimental.
	ResourceArnForDestination() *string
	// The IAM role GameLift assumes by fleet instances to access AWS ressources.
	// Experimental.
	Role() awsiam.IRole
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Defines an alias for this fleet.
	//
	// ```ts
	// declare const fleet: gamelift.FleetBase;
	//
	// fleet.addAlias('Live');
	//
	// // Is equivalent to
	//
	// new gamelift.Alias(this, 'AliasLive', {
	//   aliasName: 'Live',
	//   fleet: fleet,
	// });
	// ```.
	// Experimental.
	AddAlias(aliasName *string, options *AliasOptions) Alias
	// Adds an ingress rule to allow inbound traffic to access game sessions on this fleet.
	// Experimental.
	AddIngressRule(source IPeer, port Port)
	// Adds a remote locations to deploy additional instances to and manage as part of the fleet.
	// Experimental.
	AddInternalLocation(location *Location)
	// Adds a remote locations to deploy additional instances to and manage as part of the fleet.
	// Experimental.
	AddLocation(region *string, desiredCapacity *float64, minSize *float64, maxSize *float64)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the `grantee` identity permissions to perform `actions`.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Return the given named metric for this fleet.
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Instances with `ACTIVE` status, which means they are running active server processes.
	//
	// The count includes idle instances and those that are hosting one or more game sessions.
	// This metric measures current total instance capacity.
	//
	// This metric can be used with automatic scaling.
	// Experimental.
	MetricActiveInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Target number of active instances that GameLift is working to maintain in the fleet.
	//
	// With automatic scaling, this value is determined based on the scaling policies currently in force.
	// Without automatic scaling, this value is set manually.
	// This metric is not available when viewing data for fleet metric groups.
	// Experimental.
	MetricDesiredInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Active instances that are currently hosting zero (0) game sessions.
	//
	// This metric measures capacity that is available but unused.
	// This metric can be used with automatic scaling.
	// Experimental.
	MetricIdleInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Number of spot instances that have been interrupted.
	// Experimental.
	MetricInstanceInterruptions(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Maximum number of instances that are allowed for the fleet.
	//
	// A fleet's instance maximum determines the capacity ceiling during manual or automatic scaling up.
	// This metric is not available when viewing data for fleet metric groups.
	// Experimental.
	MetricMaxInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Minimum number of instances allowed for the fleet.
	//
	// A fleet's instance minimum determines the capacity floor during manual or automatic scaling down.
	// This metric is not available when viewing data for fleet metric groups.
	// Experimental.
	MetricMinInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Percentage of all active instances that are idle (calculated as IdleInstances / ActiveInstances).
	//
	// This metric can be used for automatic scaling.
	// Experimental.
	MetricPercentIdleInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	ParseLocationCapacity(capacity *LocationCapacity) *awsgamelift.CfnFleet_LocationCapacityProperty
	// Experimental.
	ParseLocations() *[]*awsgamelift.CfnFleet_LocationConfigurationProperty
	// Experimental.
	ParseResourceCreationLimitPolicy(props *FleetProps) *awsgamelift.CfnFleet_ResourceCreationLimitPolicyProperty
	// Experimental.
	ParseRuntimeConfiguration(props *FleetProps) *awsgamelift.CfnFleet_RuntimeConfigurationProperty
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Experimental.
	WarnVpcPeeringAuthorizations(scope constructs.Construct)
}

// The jsii proxy struct for BuildFleet
type jsiiProxy_BuildFleet struct {
	jsiiProxy_FleetBase
	jsiiProxy_IBuildFleet
}

func (j *jsiiProxy_BuildFleet) Content() IBuild {
	var returns IBuild
	_jsii_.Get(
		j,
		"content",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) FleetArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"fleetArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) FleetId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"fleetId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) GrantPrincipal() awsiam.IPrincipal {
	var returns awsiam.IPrincipal
	_jsii_.Get(
		j,
		"grantPrincipal",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) ResourceArnForDestination() *string {
	var returns *string
	_jsii_.Get(
		j,
		"resourceArnForDestination",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) Role() awsiam.IRole {
	var returns awsiam.IRole
	_jsii_.Get(
		j,
		"role",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BuildFleet) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewBuildFleet(scope constructs.Construct, id *string, props *BuildFleetProps) BuildFleet {
	_init_.Initialize()

	if err := validateNewBuildFleetParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_BuildFleet{}

	_jsii_.Create(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewBuildFleet_Override(b BuildFleet, scope constructs.Construct, id *string, props *BuildFleetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		[]interface{}{scope, id, props},
		b,
	)
}

// Import an existing fleet from its ARN.
// Experimental.
func BuildFleet_FromBuildFleetArn(scope constructs.Construct, id *string, buildFleetArn *string) IBuildFleet {
	_init_.Initialize()

	if err := validateBuildFleet_FromBuildFleetArnParameters(scope, id, buildFleetArn); err != nil {
		panic(err)
	}
	var returns IBuildFleet

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		"fromBuildFleetArn",
		[]interface{}{scope, id, buildFleetArn},
		&returns,
	)

	return returns
}

// Import an existing fleet from its identifier.
// Experimental.
func BuildFleet_FromBuildFleetId(scope constructs.Construct, id *string, buildFleetId *string) IBuildFleet {
	_init_.Initialize()

	if err := validateBuildFleet_FromBuildFleetIdParameters(scope, id, buildFleetId); err != nil {
		panic(err)
	}
	var returns IBuildFleet

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		"fromBuildFleetId",
		[]interface{}{scope, id, buildFleetId},
		&returns,
	)

	return returns
}

// Import an existing fleet from its attributes.
// Experimental.
func BuildFleet_FromFleetAttributes(scope constructs.Construct, id *string, attrs *FleetAttributes) IFleet {
	_init_.Initialize()

	if err := validateBuildFleet_FromFleetAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IFleet

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		"fromFleetAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func BuildFleet_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateBuildFleet_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func BuildFleet_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateBuildFleet_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func BuildFleet_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateBuildFleet_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-gamelift-alpha.BuildFleet",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) AddAlias(aliasName *string, options *AliasOptions) Alias {
	if err := b.validateAddAliasParameters(aliasName, options); err != nil {
		panic(err)
	}
	var returns Alias

	_jsii_.Invoke(
		b,
		"addAlias",
		[]interface{}{aliasName, options},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) AddIngressRule(source IPeer, port Port) {
	if err := b.validateAddIngressRuleParameters(source, port); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		b,
		"addIngressRule",
		[]interface{}{source, port},
	)
}

func (b *jsiiProxy_BuildFleet) AddInternalLocation(location *Location) {
	if err := b.validateAddInternalLocationParameters(location); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		b,
		"addInternalLocation",
		[]interface{}{location},
	)
}

func (b *jsiiProxy_BuildFleet) AddLocation(region *string, desiredCapacity *float64, minSize *float64, maxSize *float64) {
	if err := b.validateAddLocationParameters(region); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		b,
		"addLocation",
		[]interface{}{region, desiredCapacity, minSize, maxSize},
	)
}

func (b *jsiiProxy_BuildFleet) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := b.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		b,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (b *jsiiProxy_BuildFleet) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := b.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		b,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) GetResourceNameAttribute(nameAttr *string) *string {
	if err := b.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		b,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := b.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		b,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricActiveInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricActiveInstancesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricActiveInstances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricDesiredInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricDesiredInstancesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricDesiredInstances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricIdleInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricIdleInstancesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricIdleInstances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricInstanceInterruptions(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricInstanceInterruptionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricInstanceInterruptions",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricMaxInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricMaxInstancesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricMaxInstances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricMinInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricMinInstancesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricMinInstances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) MetricPercentIdleInstances(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := b.validateMetricPercentIdleInstancesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		b,
		"metricPercentIdleInstances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) ParseLocationCapacity(capacity *LocationCapacity) *awsgamelift.CfnFleet_LocationCapacityProperty {
	if err := b.validateParseLocationCapacityParameters(capacity); err != nil {
		panic(err)
	}
	var returns *awsgamelift.CfnFleet_LocationCapacityProperty

	_jsii_.Invoke(
		b,
		"parseLocationCapacity",
		[]interface{}{capacity},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) ParseLocations() *[]*awsgamelift.CfnFleet_LocationConfigurationProperty {
	var returns *[]*awsgamelift.CfnFleet_LocationConfigurationProperty

	_jsii_.Invoke(
		b,
		"parseLocations",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) ParseResourceCreationLimitPolicy(props *FleetProps) *awsgamelift.CfnFleet_ResourceCreationLimitPolicyProperty {
	if err := b.validateParseResourceCreationLimitPolicyParameters(props); err != nil {
		panic(err)
	}
	var returns *awsgamelift.CfnFleet_ResourceCreationLimitPolicyProperty

	_jsii_.Invoke(
		b,
		"parseResourceCreationLimitPolicy",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) ParseRuntimeConfiguration(props *FleetProps) *awsgamelift.CfnFleet_RuntimeConfigurationProperty {
	if err := b.validateParseRuntimeConfigurationParameters(props); err != nil {
		panic(err)
	}
	var returns *awsgamelift.CfnFleet_RuntimeConfigurationProperty

	_jsii_.Invoke(
		b,
		"parseRuntimeConfiguration",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BuildFleet) WarnVpcPeeringAuthorizations(scope constructs.Construct) {
	if err := b.validateWarnVpcPeeringAuthorizationsParameters(scope); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		b,
		"warnVpcPeeringAuthorizations",
		[]interface{}{scope},
	)
}


package awskms

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awskms/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// Defines a display name for a customer master key (CMK) in AWS Key Management Service (AWS KMS).
//
// Using an alias to refer to a key can help you simplify key
// management. For example, when rotating keys, you can just update the alias
// mapping instead of tracking and changing key IDs. For more information, see
// Working with Aliases in the AWS Key Management Service Developer Guide.
//
// You can also add an alias for a key by calling `key.addAlias(alias)`.
//
// Example:
//   // Passing an encrypted replication bucket created in a different stack.
//   app := awscdk.NewApp()
//   replicationStack := awscdk.Newstack(app, jsii.String("ReplicationStack"), &StackProps{
//   	Env: &Environment{
//   		Region: jsii.String("us-west-1"),
//   	},
//   })
//   key := kms.NewKey(replicationStack, jsii.String("ReplicationKey"))
//   alias := kms.NewAlias(replicationStack, jsii.String("ReplicationAlias"), &AliasProps{
//   	// aliasName is required
//   	AliasName: awscdk.PhysicalName_GENERATE_IF_NEEDED(),
//   	TargetKey: key,
//   })
//   replicationBucket := s3.NewBucket(replicationStack, jsii.String("ReplicationBucket"), &BucketProps{
//   	BucketName: awscdk.PhysicalName_GENERATE_IF_NEEDED(),
//   	EncryptionKey: alias,
//   })
//
type Alias interface {
	awscdk.Resource
	IAlias
	// The ARN of the alias.
	AliasArn() *string
	// The name of the alias.
	AliasName() *string
	AliasRef() *AliasReference
	// The Key to which the Alias refers.
	AliasTargetKey() IKey
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The ARN of the alias.
	// Deprecated: use `aliasArn` instead.
	KeyArn() *string
	// The ID of the key (the part that looks something like: 1234abcd-12ab-34cd-56ef-1234567890ab).
	KeyId() *string
	KeyRef() *KeyReference
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Defines a new alias for the key.
	AddAlias(alias *string) Alias
	// Adds a statement to the KMS key resource policy.
	AddToResourcePolicy(statement awsiam.PolicyStatement, allowNoOp *bool) *awsiam.AddToResourcePolicyResult
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the indicated permissions on this key to the given principal.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Grant decryption permissions using this key to the given principal.
	GrantDecrypt(grantee awsiam.IGrantable) awsiam.Grant
	// Grant encryption permissions using this key to the given principal.
	GrantEncrypt(grantee awsiam.IGrantable) awsiam.Grant
	// Grant encryption and decryption permissions using this key to the given principal.
	GrantEncryptDecrypt(grantee awsiam.IGrantable) awsiam.Grant
	// Grant permissions to generating MACs to the given principal.
	GrantGenerateMac(grantee awsiam.IGrantable) awsiam.Grant
	// Grant sign permissions using this key to the given principal.
	GrantSign(grantee awsiam.IGrantable) awsiam.Grant
	// Grant sign and verify permissions using this key to the given principal.
	GrantSignVerify(grantee awsiam.IGrantable) awsiam.Grant
	// Grant verify permissions using this key to the given principal.
	GrantVerify(grantee awsiam.IGrantable) awsiam.Grant
	// Grant permissions to verifying MACs to the given principal.
	GrantVerifyMac(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Alias
type jsiiProxy_Alias struct {
	internal.Type__awscdkResource
	jsiiProxy_IAlias
}

func (j *jsiiProxy_Alias) AliasArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"aliasArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) AliasName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"aliasName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) AliasRef() *AliasReference {
	var returns *AliasReference
	_jsii_.Get(
		j,
		"aliasRef",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) AliasTargetKey() IKey {
	var returns IKey
	_jsii_.Get(
		j,
		"aliasTargetKey",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) KeyArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"keyArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) KeyId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"keyId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) KeyRef() *KeyReference {
	var returns *KeyReference
	_jsii_.Get(
		j,
		"keyRef",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Alias) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


func NewAlias(scope constructs.Construct, id *string, props *AliasProps) Alias {
	_init_.Initialize()

	if err := validateNewAliasParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Alias{}

	_jsii_.Create(
		"aws-cdk-lib.aws_kms.Alias",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

func NewAlias_Override(a Alias, scope constructs.Construct, id *string, props *AliasProps) {
	_init_.Initialize()

	_jsii_.Create(
		"aws-cdk-lib.aws_kms.Alias",
		[]interface{}{scope, id, props},
		a,
	)
}

// Import an existing KMS Alias defined outside the CDK app.
func Alias_FromAliasAttributes(scope constructs.Construct, id *string, attrs *AliasAttributes) IAlias {
	_init_.Initialize()

	if err := validateAlias_FromAliasAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IAlias

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_kms.Alias",
		"fromAliasAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Import an existing KMS Alias defined outside the CDK app, by the alias name.
//
// This method should be used
// instead of 'fromAliasAttributes' when the underlying KMS Key ARN is not available.
// This Alias will not have a direct reference to the KMS Key, so addAlias method is not supported.
//
// If the `@aws-cdk/aws-kms:applyImportedAliasPermissionsToPrincipal` feature flag is set to `true`,
// the grant* methods will use the kms:ResourceAliases condition to grant permissions to the specific alias name.
// They will only modify the principal policy, not the key resource policy.
// Without the feature flag `grant*` methods will be a no-op.
func Alias_FromAliasName(scope constructs.Construct, id *string, aliasName *string) IAlias {
	_init_.Initialize()

	if err := validateAlias_FromAliasNameParameters(scope, id, aliasName); err != nil {
		panic(err)
	}
	var returns IAlias

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_kms.Alias",
		"fromAliasName",
		[]interface{}{scope, id, aliasName},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func Alias_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateAlias_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_kms.Alias",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func Alias_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateAlias_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_kms.Alias",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func Alias_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateAlias_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_kms.Alias",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Alias_PROPERTY_INJECTION_ID() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"aws-cdk-lib.aws_kms.Alias",
		"PROPERTY_INJECTION_ID",
		&returns,
	)
	return returns
}

func (a *jsiiProxy_Alias) AddAlias(alias *string) Alias {
	if err := a.validateAddAliasParameters(alias); err != nil {
		panic(err)
	}
	var returns Alias

	_jsii_.Invoke(
		a,
		"addAlias",
		[]interface{}{alias},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) AddToResourcePolicy(statement awsiam.PolicyStatement, allowNoOp *bool) *awsiam.AddToResourcePolicyResult {
	if err := a.validateAddToResourcePolicyParameters(statement); err != nil {
		panic(err)
	}
	var returns *awsiam.AddToResourcePolicyResult

	_jsii_.Invoke(
		a,
		"addToResourcePolicy",
		[]interface{}{statement, allowNoOp},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := a.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		a,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (a *jsiiProxy_Alias) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := a.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GetResourceNameAttribute(nameAttr *string) *string {
	if err := a.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := a.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantDecrypt(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantDecryptParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantDecrypt",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantEncrypt(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantEncryptParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantEncrypt",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantEncryptDecrypt(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantEncryptDecryptParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantEncryptDecrypt",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantGenerateMac(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantGenerateMacParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantGenerateMac",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantSign(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantSignParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantSign",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantSignVerify(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantSignVerifyParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantSignVerify",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantVerify(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantVerifyParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantVerify",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) GrantVerifyMac(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantVerifyMacParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantVerifyMac",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Alias) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


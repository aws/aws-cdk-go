package awsses

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsses/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// An email identity.
//
// Example:
//   import iam "github.com/aws/aws-cdk-go/awscdk"
//   var user user
//
//
//   identity := ses.NewEmailIdentity(this, jsii.String("Identity"), &EmailIdentityProps{
//   	Identity: ses.Identity_Domain(jsii.String("cdk.dev")),
//   })
//
//   identity.grantSendEmail(user)
//
type EmailIdentity interface {
	awscdk.Resource
	IEmailIdentity
	// The host name for the first token that you have to add to the DNS configurationfor your domain.
	DkimDnsTokenName1() *string
	// The host name for the second token that you have to add to the DNS configuration for your domain.
	DkimDnsTokenName2() *string
	// The host name for the third token that you have to add to the DNS configuration for your domain.
	DkimDnsTokenName3() *string
	// The record value for the first token that you have to add to the DNS configuration for your domain.
	DkimDnsTokenValue1() *string
	// The record value for the second token that you have to add to the DNS configuration for your domain.
	DkimDnsTokenValue2() *string
	// The record value for the third token that you have to add to the DNS configuration for your domain.
	DkimDnsTokenValue3() *string
	// DKIM records for this identity.
	DkimRecords() *[]*DkimRecord
	// The ARN of the email identity.
	EmailIdentityArn() *string
	// The name of the email identity.
	EmailIdentityName() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Adds an IAM policy statement associated with this email identity to an IAM principal's policy.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Permits an IAM principal the send email action.
	//
	// Actions: SendEmail, SendRawEmail.
	GrantSendEmail(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for EmailIdentity
type jsiiProxy_EmailIdentity struct {
	internal.Type__awscdkResource
	jsiiProxy_IEmailIdentity
}

func (j *jsiiProxy_EmailIdentity) DkimDnsTokenName1() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dkimDnsTokenName1",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) DkimDnsTokenName2() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dkimDnsTokenName2",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) DkimDnsTokenName3() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dkimDnsTokenName3",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) DkimDnsTokenValue1() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dkimDnsTokenValue1",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) DkimDnsTokenValue2() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dkimDnsTokenValue2",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) DkimDnsTokenValue3() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dkimDnsTokenValue3",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) DkimRecords() *[]*DkimRecord {
	var returns *[]*DkimRecord
	_jsii_.Get(
		j,
		"dkimRecords",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) EmailIdentityArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"emailIdentityArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) EmailIdentityName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"emailIdentityName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EmailIdentity) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


func NewEmailIdentity(scope constructs.Construct, id *string, props *EmailIdentityProps) EmailIdentity {
	_init_.Initialize()

	if err := validateNewEmailIdentityParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_EmailIdentity{}

	_jsii_.Create(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

func NewEmailIdentity_Override(e EmailIdentity, scope constructs.Construct, id *string, props *EmailIdentityProps) {
	_init_.Initialize()

	_jsii_.Create(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		[]interface{}{scope, id, props},
		e,
	)
}

// Import an email identity by ARN.
func EmailIdentity_FromEmailIdentityArn(scope constructs.Construct, id *string, emailIdentityArn *string) IEmailIdentity {
	_init_.Initialize()

	if err := validateEmailIdentity_FromEmailIdentityArnParameters(scope, id, emailIdentityArn); err != nil {
		panic(err)
	}
	var returns IEmailIdentity

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		"fromEmailIdentityArn",
		[]interface{}{scope, id, emailIdentityArn},
		&returns,
	)

	return returns
}

// Use an existing email identity.
func EmailIdentity_FromEmailIdentityName(scope constructs.Construct, id *string, emailIdentityName *string) IEmailIdentity {
	_init_.Initialize()

	if err := validateEmailIdentity_FromEmailIdentityNameParameters(scope, id, emailIdentityName); err != nil {
		panic(err)
	}
	var returns IEmailIdentity

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		"fromEmailIdentityName",
		[]interface{}{scope, id, emailIdentityName},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func EmailIdentity_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateEmailIdentity_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func EmailIdentity_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateEmailIdentity_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func EmailIdentity_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateEmailIdentity_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_ses.EmailIdentity",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EmailIdentity) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := e.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		e,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (e *jsiiProxy_EmailIdentity) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EmailIdentity) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := e.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		e,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EmailIdentity) GetResourceNameAttribute(nameAttr *string) *string {
	if err := e.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		e,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EmailIdentity) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := e.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EmailIdentity) GrantSendEmail(grantee awsiam.IGrantable) awsiam.Grant {
	if err := e.validateGrantSendEmailParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grantSendEmail",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EmailIdentity) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


package awsroute53

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsroute53/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// Container for records, and records contain information about how to route traffic for a specific domain, such as example.com and its subdomains (acme.example.com, zenith.example.com).
//
// Example:
//   kmsKey := kms.NewKey(this, jsii.String("KmsCMK"), &KeyProps{
//   	KeySpec: kms.KeySpec_ECC_NIST_P256,
//   	KeyUsage: kms.KeyUsage_SIGN_VERIFY,
//   })
//   hostedZone := route53.NewHostedZone(this, jsii.String("HostedZone"), &HostedZoneProps{
//   	ZoneName: jsii.String("example.com"),
//   })
//   // Enable DNSSEC signing for the zone
//   hostedZone.EnableDnssec(&ZoneSigningOptions{
//   	KmsKey: KmsKey,
//   })
//
type HostedZone interface {
	awscdk.Resource
	IHostedZone
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// ARN of this hosted zone, such as arn:${Partition}:route53:::hostedzone/${Id}.
	HostedZoneArn() *string
	// ID of this hosted zone, such as "Z23ABC4XYZL05B".
	HostedZoneId() *string
	// Returns the set of name servers for the specific hosted zone. For example: ns1.example.com.
	//
	// This attribute will be undefined for private hosted zones or hosted zones imported from another stack.
	HostedZoneNameServers() *[]*string
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// VPCs to which this hosted zone will be added.
	Vpcs() *[]*CfnHostedZone_VPCProperty
	// FQDN of this hosted zone.
	ZoneName() *string
	// Add another VPC to this private hosted zone.
	AddVpc(vpc awsec2.IVpc)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Enable DNSSEC for this hosted zone.
	//
	// This will create a key signing key with the given options and enable DNSSEC signing
	// for the hosted zone.
	EnableDnssec(options *ZoneSigningOptions) IKeySigningKey
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant permissions to add delegation records to this zone.
	GrantDelegation(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for HostedZone
type jsiiProxy_HostedZone struct {
	internal.Type__awscdkResource
	jsiiProxy_IHostedZone
}

func (j *jsiiProxy_HostedZone) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) HostedZoneArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"hostedZoneArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) HostedZoneId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"hostedZoneId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) HostedZoneNameServers() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"hostedZoneNameServers",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) Vpcs() *[]*CfnHostedZone_VPCProperty {
	var returns *[]*CfnHostedZone_VPCProperty
	_jsii_.Get(
		j,
		"vpcs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HostedZone) ZoneName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"zoneName",
		&returns,
	)
	return returns
}


func NewHostedZone(scope constructs.Construct, id *string, props *HostedZoneProps) HostedZone {
	_init_.Initialize()

	if err := validateNewHostedZoneParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_HostedZone{}

	_jsii_.Create(
		"aws-cdk-lib.aws_route53.HostedZone",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

func NewHostedZone_Override(h HostedZone, scope constructs.Construct, id *string, props *HostedZoneProps) {
	_init_.Initialize()

	_jsii_.Create(
		"aws-cdk-lib.aws_route53.HostedZone",
		[]interface{}{scope, id, props},
		h,
	)
}

// Imports a hosted zone from another stack.
//
// Use when both hosted zone ID and hosted zone name are known.
func HostedZone_FromHostedZoneAttributes(scope constructs.Construct, id *string, attrs *HostedZoneAttributes) IHostedZone {
	_init_.Initialize()

	if err := validateHostedZone_FromHostedZoneAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IHostedZone

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_route53.HostedZone",
		"fromHostedZoneAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Import a Route 53 hosted zone defined either outside the CDK, or in a different CDK stack.
//
// Use when hosted zone ID is known. If a HostedZone is imported with this method the zoneName cannot be referenced.
// If the zoneName is needed then the HostedZone should be imported with `fromHostedZoneAttributes()` or `fromLookup()`.
func HostedZone_FromHostedZoneId(scope constructs.Construct, id *string, hostedZoneId *string) IHostedZone {
	_init_.Initialize()

	if err := validateHostedZone_FromHostedZoneIdParameters(scope, id, hostedZoneId); err != nil {
		panic(err)
	}
	var returns IHostedZone

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_route53.HostedZone",
		"fromHostedZoneId",
		[]interface{}{scope, id, hostedZoneId},
		&returns,
	)

	return returns
}

// Lookup a hosted zone in the current account/region based on query parameters.
//
// Requires environment, you must specify env for the stack.
//
// Use to easily query hosted zones.
// See: https://docs.aws.amazon.com/cdk/latest/guide/environments.html
//
func HostedZone_FromLookup(scope constructs.Construct, id *string, query *HostedZoneProviderProps) IHostedZone {
	_init_.Initialize()

	if err := validateHostedZone_FromLookupParameters(scope, id, query); err != nil {
		panic(err)
	}
	var returns IHostedZone

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_route53.HostedZone",
		"fromLookup",
		[]interface{}{scope, id, query},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func HostedZone_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateHostedZone_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_route53.HostedZone",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func HostedZone_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateHostedZone_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_route53.HostedZone",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func HostedZone_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateHostedZone_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_route53.HostedZone",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (h *jsiiProxy_HostedZone) AddVpc(vpc awsec2.IVpc) {
	if err := h.validateAddVpcParameters(vpc); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		h,
		"addVpc",
		[]interface{}{vpc},
	)
}

func (h *jsiiProxy_HostedZone) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := h.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		h,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (h *jsiiProxy_HostedZone) EnableDnssec(options *ZoneSigningOptions) IKeySigningKey {
	if err := h.validateEnableDnssecParameters(options); err != nil {
		panic(err)
	}
	var returns IKeySigningKey

	_jsii_.Invoke(
		h,
		"enableDnssec",
		[]interface{}{options},
		&returns,
	)

	return returns
}

func (h *jsiiProxy_HostedZone) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		h,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (h *jsiiProxy_HostedZone) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := h.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		h,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (h *jsiiProxy_HostedZone) GetResourceNameAttribute(nameAttr *string) *string {
	if err := h.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		h,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (h *jsiiProxy_HostedZone) GrantDelegation(grantee awsiam.IGrantable) awsiam.Grant {
	if err := h.validateGrantDelegationParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		h,
		"grantDelegation",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (h *jsiiProxy_HostedZone) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		h,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


package awsappsync

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsdynamodb"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsevents"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awslambda"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsopensearchservice"
	"github.com/aws/aws-cdk-go/awscdk/v2/awssecretsmanager"
	"github.com/aws/constructs-go/constructs/v10"
)

// Base Class for Event API.
type EventApiBase interface {
	ApiBase
	IEventApi
	// The ARN of the AWS AppSync Api.
	ApiArn() *string
	// The unique identifier for the AWS AppSync Api generated by the service.
	ApiId() *string
	// The Authorization Types for this Event Api.
	AuthProviderTypes() *[]AppSyncAuthorizationType
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The domain name of the Api's HTTP endpoint.
	HttpDns() *string
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The domain name of the Api's real-time endpoint.
	RealtimeDns() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// add a new Channel Namespace to this API.
	AddChannelNamespace(id *string, options *ChannelNamespaceOptions) ChannelNamespace
	// add a new DynamoDB data source to this API.
	AddDynamoDbDataSource(id *string, table awsdynamodb.ITable, options *AppSyncDataSourceOptions) AppSyncDynamoDbDataSource
	// Add an EventBridge data source to this api.
	AddEventBridgeDataSource(id *string, eventBus awsevents.IEventBus, options *AppSyncDataSourceOptions) AppSyncEventBridgeDataSource
	// add a new http data source to this API.
	AddHttpDataSource(id *string, endpoint *string, options *AppSyncHttpDataSourceOptions) AppSyncHttpDataSource
	// add a new Lambda data source to this API.
	AddLambdaDataSource(id *string, lambdaFunction awslambda.IFunction, options *AppSyncDataSourceOptions) AppSyncLambdaDataSource
	// add a new OpenSearch data source to this API.
	AddOpenSearchDataSource(id *string, domain awsopensearchservice.IDomain, options *AppSyncDataSourceOptions) AppSyncOpenSearchDataSource
	// add a new Rds data source to this API.
	AddRdsDataSource(id *string, serverlessCluster interface{}, secretStore awssecretsmanager.ISecret, databaseName *string, options *AppSyncDataSourceOptions) AppSyncRdsDataSource
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Adds an IAM policy statement associated with this Event API to an IAM principal's policy.
	Grant(grantee awsiam.IGrantable, resources AppSyncEventResource, actions ...*string) awsiam.Grant
	// Adds an IAM policy statement for EventConnect access to this EventApi to an IAM principal's policy.
	GrantConnect(grantee awsiam.IGrantable) awsiam.Grant
	// Adds an IAM policy statement for EventPublish access to this EventApi to an IAM principal's policy.
	//
	// This grants publish permission for all channels within the API.
	GrantPublish(grantee awsiam.IGrantable) awsiam.Grant
	// Adds an IAM policy statement to publish and subscribe to this API for an IAM principal's policy.
	//
	// This grants publish & subscribe permission for all channels within the API.
	GrantPublishAndSubscribe(grantee awsiam.IGrantable) awsiam.Grant
	// Adds an IAM policy statement for EventSubscribe access to this EventApi to an IAM principal's policy.
	//
	// This grants subscribe permission for all channels within the API.
	GrantSubscribe(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for EventApiBase
type jsiiProxy_EventApiBase struct {
	jsiiProxy_ApiBase
	jsiiProxy_IEventApi
}

func (j *jsiiProxy_EventApiBase) ApiArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) ApiId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) AuthProviderTypes() *[]AppSyncAuthorizationType {
	var returns *[]AppSyncAuthorizationType
	_jsii_.Get(
		j,
		"authProviderTypes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) HttpDns() *string {
	var returns *string
	_jsii_.Get(
		j,
		"httpDns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) RealtimeDns() *string {
	var returns *string
	_jsii_.Get(
		j,
		"realtimeDns",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EventApiBase) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


func NewEventApiBase_Override(e EventApiBase, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"aws-cdk-lib.aws_appsync.EventApiBase",
		[]interface{}{scope, id, props},
		e,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func EventApiBase_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateEventApiBase_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_appsync.EventApiBase",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func EventApiBase_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateEventApiBase_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_appsync.EventApiBase",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func EventApiBase_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateEventApiBase_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-lib.aws_appsync.EventApiBase",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddChannelNamespace(id *string, options *ChannelNamespaceOptions) ChannelNamespace {
	if err := e.validateAddChannelNamespaceParameters(id, options); err != nil {
		panic(err)
	}
	var returns ChannelNamespace

	_jsii_.Invoke(
		e,
		"addChannelNamespace",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddDynamoDbDataSource(id *string, table awsdynamodb.ITable, options *AppSyncDataSourceOptions) AppSyncDynamoDbDataSource {
	if err := e.validateAddDynamoDbDataSourceParameters(id, table, options); err != nil {
		panic(err)
	}
	var returns AppSyncDynamoDbDataSource

	_jsii_.Invoke(
		e,
		"addDynamoDbDataSource",
		[]interface{}{id, table, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddEventBridgeDataSource(id *string, eventBus awsevents.IEventBus, options *AppSyncDataSourceOptions) AppSyncEventBridgeDataSource {
	if err := e.validateAddEventBridgeDataSourceParameters(id, eventBus, options); err != nil {
		panic(err)
	}
	var returns AppSyncEventBridgeDataSource

	_jsii_.Invoke(
		e,
		"addEventBridgeDataSource",
		[]interface{}{id, eventBus, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddHttpDataSource(id *string, endpoint *string, options *AppSyncHttpDataSourceOptions) AppSyncHttpDataSource {
	if err := e.validateAddHttpDataSourceParameters(id, endpoint, options); err != nil {
		panic(err)
	}
	var returns AppSyncHttpDataSource

	_jsii_.Invoke(
		e,
		"addHttpDataSource",
		[]interface{}{id, endpoint, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddLambdaDataSource(id *string, lambdaFunction awslambda.IFunction, options *AppSyncDataSourceOptions) AppSyncLambdaDataSource {
	if err := e.validateAddLambdaDataSourceParameters(id, lambdaFunction, options); err != nil {
		panic(err)
	}
	var returns AppSyncLambdaDataSource

	_jsii_.Invoke(
		e,
		"addLambdaDataSource",
		[]interface{}{id, lambdaFunction, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddOpenSearchDataSource(id *string, domain awsopensearchservice.IDomain, options *AppSyncDataSourceOptions) AppSyncOpenSearchDataSource {
	if err := e.validateAddOpenSearchDataSourceParameters(id, domain, options); err != nil {
		panic(err)
	}
	var returns AppSyncOpenSearchDataSource

	_jsii_.Invoke(
		e,
		"addOpenSearchDataSource",
		[]interface{}{id, domain, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) AddRdsDataSource(id *string, serverlessCluster interface{}, secretStore awssecretsmanager.ISecret, databaseName *string, options *AppSyncDataSourceOptions) AppSyncRdsDataSource {
	if err := e.validateAddRdsDataSourceParameters(id, serverlessCluster, secretStore, options); err != nil {
		panic(err)
	}
	var returns AppSyncRdsDataSource

	_jsii_.Invoke(
		e,
		"addRdsDataSource",
		[]interface{}{id, serverlessCluster, secretStore, databaseName, options},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := e.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		e,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (e *jsiiProxy_EventApiBase) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := e.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		e,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) GetResourceNameAttribute(nameAttr *string) *string {
	if err := e.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		e,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) Grant(grantee awsiam.IGrantable, resources AppSyncEventResource, actions ...*string) awsiam.Grant {
	if err := e.validateGrantParameters(grantee, resources); err != nil {
		panic(err)
	}
	args := []interface{}{grantee, resources}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) GrantConnect(grantee awsiam.IGrantable) awsiam.Grant {
	if err := e.validateGrantConnectParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grantConnect",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) GrantPublish(grantee awsiam.IGrantable) awsiam.Grant {
	if err := e.validateGrantPublishParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grantPublish",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) GrantPublishAndSubscribe(grantee awsiam.IGrantable) awsiam.Grant {
	if err := e.validateGrantPublishAndSubscribeParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grantPublishAndSubscribe",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) GrantSubscribe(grantee awsiam.IGrantable) awsiam.Grant {
	if err := e.validateGrantSubscribeParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		e,
		"grantSubscribe",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EventApiBase) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


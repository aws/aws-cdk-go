package awscdklocationalpha

import (
	_init_ "github.com/aws/aws-cdk-go/awscdklocationalpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdklocationalpha/v2/internal"
	"github.com/aws/constructs-go/constructs/v10"
)

// A Tracker.
//
// Example:
//   var role role
//
//
//   tracker := location.NewTracker(this, jsii.String("Tracker"), &TrackerProps{
//   	TrackerName: jsii.String("MyTracker"),
//   })
//
//   tracker.GrantRead(role)
//
// See: https://docs.aws.amazon.com/location/latest/developerguide/geofence-tracker-concepts.html#tracking-overview
//
// Experimental.
type Tracker interface {
	awscdk.Resource
	ITracker
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// The Amazon Resource Name (ARN) of the tracker resource.
	// Experimental.
	TrackerArn() *string
	// The timestamp for when the tracker resource was created in ISO 8601 format.
	// Experimental.
	TrackerCreateTime() *string
	// The name of the tracker.
	// Experimental.
	TrackerName() *string
	// The timestamp for when the tracker resource was last updated in ISO 8601 format.
	// Experimental.
	TrackerUpdateTime() *string
	// Add Geofence Collections which are associated to the tracker resource.
	// Experimental.
	AddGeofenceCollections(geofenceCollections ...IGeofenceCollection)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the given principal identity permissions to perform the actions on this tracker.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Grant the given identity permissions to read device positions from a tracker.
	// See: https://docs.aws.amazon.com/location/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-read-only-trackers
	//
	// Experimental.
	GrantRead(grantee awsiam.IGrantable) awsiam.Grant
	// Grant the given identity permissions to update device positions for a tracker.
	// See: https://docs.aws.amazon.com/location/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-read-only-trackers
	//
	// Experimental.
	GrantUpdateDevicePositions(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for Tracker
type jsiiProxy_Tracker struct {
	internal.Type__awscdkResource
	jsiiProxy_ITracker
}

func (j *jsiiProxy_Tracker) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) TrackerArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"trackerArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) TrackerCreateTime() *string {
	var returns *string
	_jsii_.Get(
		j,
		"trackerCreateTime",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) TrackerName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"trackerName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Tracker) TrackerUpdateTime() *string {
	var returns *string
	_jsii_.Get(
		j,
		"trackerUpdateTime",
		&returns,
	)
	return returns
}


// Experimental.
func NewTracker(scope constructs.Construct, id *string, props *TrackerProps) Tracker {
	_init_.Initialize()

	if err := validateNewTrackerParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Tracker{}

	_jsii_.Create(
		"@aws-cdk/aws-location-alpha.Tracker",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewTracker_Override(t Tracker, scope constructs.Construct, id *string, props *TrackerProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-location-alpha.Tracker",
		[]interface{}{scope, id, props},
		t,
	)
}

// Use an existing tracker by ARN.
// Experimental.
func Tracker_FromTrackerArn(scope constructs.Construct, id *string, trackerArn *string) ITracker {
	_init_.Initialize()

	if err := validateTracker_FromTrackerArnParameters(scope, id, trackerArn); err != nil {
		panic(err)
	}
	var returns ITracker

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-location-alpha.Tracker",
		"fromTrackerArn",
		[]interface{}{scope, id, trackerArn},
		&returns,
	)

	return returns
}

// Use an existing tracker by name.
// Experimental.
func Tracker_FromTrackerName(scope constructs.Construct, id *string, trackerName *string) ITracker {
	_init_.Initialize()

	if err := validateTracker_FromTrackerNameParameters(scope, id, trackerName); err != nil {
		panic(err)
	}
	var returns ITracker

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-location-alpha.Tracker",
		"fromTrackerName",
		[]interface{}{scope, id, trackerName},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func Tracker_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateTracker_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-location-alpha.Tracker",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func Tracker_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateTracker_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-location-alpha.Tracker",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func Tracker_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateTracker_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-location-alpha.Tracker",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Tracker_PROPERTY_INJECTION_ID() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"@aws-cdk/aws-location-alpha.Tracker",
		"PROPERTY_INJECTION_ID",
		&returns,
	)
	return returns
}

func (t *jsiiProxy_Tracker) AddGeofenceCollections(geofenceCollections ...IGeofenceCollection) {
	args := []interface{}{}
	for _, a := range geofenceCollections {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		t,
		"addGeofenceCollections",
		args,
	)
}

func (t *jsiiProxy_Tracker) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := t.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		t,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (t *jsiiProxy_Tracker) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Tracker) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := t.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		t,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Tracker) GetResourceNameAttribute(nameAttr *string) *string {
	if err := t.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		t,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Tracker) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := t.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		t,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Tracker) GrantRead(grantee awsiam.IGrantable) awsiam.Grant {
	if err := t.validateGrantReadParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		t,
		"grantRead",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Tracker) GrantUpdateDevicePositions(grantee awsiam.IGrantable) awsiam.Grant {
	if err := t.validateGrantUpdateDevicePositionsParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		t,
		"grantUpdateDevicePositions",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Tracker) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


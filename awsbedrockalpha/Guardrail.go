package awsbedrockalpha

import (
	_init_ "github.com/aws/aws-cdk-go/awsbedrockalpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsbedrock"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awskms"
	"github.com/aws/constructs-go/constructs/v10"
)

// Class to create a Guardrail with CDK.
//
// Example:
//   guardrail := bedrock.NewGuardrail(this, jsii.String("bedrockGuardrails"), &GuardrailProps{
//   	GuardrailName: jsii.String("my-BedrockGuardrails"),
//   })
//   // Add regex filter with input/output actions
//   guardrail.AddRegexFilter(&RegexFilter{
//   	Name: jsii.String("TestRegexFilter"),
//   	Pattern: jsii.String("test-pattern"),
//   	Action: bedrock.GuardrailAction_ANONYMIZE,
//   	// below props are optional
//   	Description: jsii.String("This is a test regex filter"),
//   	InputAction: bedrock.GuardrailAction_BLOCK,
//   	InputEnabled: jsii.Boolean(true),
//   	OutputAction: bedrock.GuardrailAction_ANONYMIZE,
//   	OutputEnabled: jsii.Boolean(true),
//   })
//
// Experimental.
type Guardrail interface {
	GuardrailBase
	// The message to return when the guardrail blocks a prompt.
	// Default: "Sorry, your query violates our usage policy."
	//
	// Experimental.
	BlockedInputMessaging() *string
	// The message to return when the guardrail blocks a model response.
	// Default: "Sorry, I am unable to answer your question because of our usage policy."
	//
	// Experimental.
	BlockedOutputsMessaging() *string
	// The content filters applied by the guardrail.
	// Experimental.
	ContentFilters() *[]*ContentFilter
	// The tier that your guardrail uses for content filters.
	//
	// Consider using a tier that balances performance, accuracy, and compatibility with your existing generative AI workflows.
	// Default: filters.TierConfig.CLASSIC
	//
	// Experimental.
	ContentFiltersTierConfig() TierConfig
	// The contextual grounding filters applied by the guardrail.
	// Experimental.
	ContextualGroundingFilters() *[]*ContextualGroundingFilter
	// The cross-region configuration for the guardrail.
	// Experimental.
	CrossRegionConfig() *GuardrailCrossRegionConfigProperty
	// The denied topic filters applied by the guardrail.
	// Experimental.
	DeniedTopics() *[]Topic
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The ARN of the guardrail.
	// Experimental.
	GuardrailArn() *string
	// The ID of the guardrail.
	// Experimental.
	GuardrailId() *string
	// The version of the guardrail.
	// Experimental.
	GuardrailVersion() *string
	// The computed hash of the guardrail properties.
	// Experimental.
	Hash() *string
	// The KMS key used to encrypt data.
	// Default: undefined - "Data is encrypted by default with a key that AWS owns and manages for you".
	//
	// Experimental.
	KmsKey() awskms.IKey
	// When this guardrail was last updated.
	// Experimental.
	LastUpdated() *string
	// The managed word list filters applied by the guardrail.
	// Experimental.
	ManagedWordListFilters() *[]*ManagedWordFilter
	// The name of the guardrail.
	// Experimental.
	Name() *string
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The PII filters applied by the guardrail.
	// Experimental.
	PiiFilters() *[]*PIIFilter
	// The regex filters applied by the guardrail.
	// Experimental.
	RegexFilters() *[]*RegexFilter
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// The tier that your guardrail uses for denied topic filters.
	// Default: filters.TierConfig.CLASSIC
	//
	// Experimental.
	TopicsTierConfig() TierConfig
	// The word filters applied by the guardrail.
	// Experimental.
	WordFilters() *[]*WordFilter
	// Adds a content filter to the guardrail.
	// Experimental.
	AddContentFilter(filter *ContentFilter)
	// Adds a contextual grounding filter to the guardrail.
	// Experimental.
	AddContextualGroundingFilter(filter *ContextualGroundingFilter)
	// Adds a denied topic filter to the guardrail.
	// Experimental.
	AddDeniedTopicFilter(filter Topic)
	// Adds a managed word list filter to the guardrail.
	// Experimental.
	AddManagedWordListFilter(filter *ManagedWordFilter)
	// Adds a PII filter to the guardrail.
	// Experimental.
	AddPIIFilter(filter *PIIFilter)
	// Adds a regex filter to the guardrail.
	// Experimental.
	AddRegexFilter(filter *RegexFilter)
	// Adds a word filter to the guardrail.
	// Experimental.
	AddWordFilter(filter *WordFilter)
	// Adds a word filter to the guardrail.
	// Experimental.
	AddWordFilterFromFile(filePath *string, inputAction GuardrailAction, outputAction GuardrailAction, inputEnabled *bool, outputEnabled *bool)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Create a version for the guardrail.
	//
	// Returns: The guardrail version.
	// Experimental.
	CreateVersion(description *string) *string
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the given principal identity permissions to perform actions on this guardrail.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Grant the given identity permissions to apply the guardrail.
	// Experimental.
	GrantApply(grantee awsiam.IGrantable) awsiam.Grant
	// Return the given named metric for this guardrail.
	//
	// By default, the metric will be calculated as a sum over a period of 5 minutes.
	// You can customize this by using the `statistic` and `period` properties.
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the invocation client errors metric for this guardrail.
	// Experimental.
	MetricInvocationClientErrors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the invocation latency metric for this guardrail.
	// Experimental.
	MetricInvocationLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the invocations metric for this guardrail.
	// Experimental.
	MetricInvocations(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the invocation server errors metric for this guardrail.
	// Experimental.
	MetricInvocationServerErrors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the invocations intervened metric for this guardrail.
	// Experimental.
	MetricInvocationsIntervened(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the invocation throttles metric for this guardrail.
	// Experimental.
	MetricInvocationThrottles(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Return the text unit count metric for this guardrail.
	// Experimental.
	MetricTextUnitCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Experimental.
	UpdateVersion(version *string)
}

// The jsii proxy struct for Guardrail
type jsiiProxy_Guardrail struct {
	jsiiProxy_GuardrailBase
}

func (j *jsiiProxy_Guardrail) BlockedInputMessaging() *string {
	var returns *string
	_jsii_.Get(
		j,
		"blockedInputMessaging",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) BlockedOutputsMessaging() *string {
	var returns *string
	_jsii_.Get(
		j,
		"blockedOutputsMessaging",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) ContentFilters() *[]*ContentFilter {
	var returns *[]*ContentFilter
	_jsii_.Get(
		j,
		"contentFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) ContentFiltersTierConfig() TierConfig {
	var returns TierConfig
	_jsii_.Get(
		j,
		"contentFiltersTierConfig",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) ContextualGroundingFilters() *[]*ContextualGroundingFilter {
	var returns *[]*ContextualGroundingFilter
	_jsii_.Get(
		j,
		"contextualGroundingFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) CrossRegionConfig() *GuardrailCrossRegionConfigProperty {
	var returns *GuardrailCrossRegionConfigProperty
	_jsii_.Get(
		j,
		"crossRegionConfig",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) DeniedTopics() *[]Topic {
	var returns *[]Topic
	_jsii_.Get(
		j,
		"deniedTopics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) GuardrailArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"guardrailArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) GuardrailId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"guardrailId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) GuardrailVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"guardrailVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) Hash() *string {
	var returns *string
	_jsii_.Get(
		j,
		"hash",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) KmsKey() awskms.IKey {
	var returns awskms.IKey
	_jsii_.Get(
		j,
		"kmsKey",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) LastUpdated() *string {
	var returns *string
	_jsii_.Get(
		j,
		"lastUpdated",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) ManagedWordListFilters() *[]*ManagedWordFilter {
	var returns *[]*ManagedWordFilter
	_jsii_.Get(
		j,
		"managedWordListFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) PiiFilters() *[]*PIIFilter {
	var returns *[]*PIIFilter
	_jsii_.Get(
		j,
		"piiFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) RegexFilters() *[]*RegexFilter {
	var returns *[]*RegexFilter
	_jsii_.Get(
		j,
		"regexFilters",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) TopicsTierConfig() TierConfig {
	var returns TierConfig
	_jsii_.Get(
		j,
		"topicsTierConfig",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Guardrail) WordFilters() *[]*WordFilter {
	var returns *[]*WordFilter
	_jsii_.Get(
		j,
		"wordFilters",
		&returns,
	)
	return returns
}


// Experimental.
func NewGuardrail(scope constructs.Construct, id *string, props *GuardrailProps) Guardrail {
	_init_.Initialize()

	if err := validateNewGuardrailParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Guardrail{}

	_jsii_.Create(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewGuardrail_Override(g Guardrail, scope constructs.Construct, id *string, props *GuardrailProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		[]interface{}{scope, id, props},
		g,
	)
}

// Import a low-level L1 Cfn Guardrail.
// Experimental.
func Guardrail_FromCfnGuardrail(cfnGuardrail awsbedrock.CfnGuardrail) IGuardrail {
	_init_.Initialize()

	if err := validateGuardrail_FromCfnGuardrailParameters(cfnGuardrail); err != nil {
		panic(err)
	}
	var returns IGuardrail

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"fromCfnGuardrail",
		[]interface{}{cfnGuardrail},
		&returns,
	)

	return returns
}

// Import a guardrail given its attributes.
// Experimental.
func Guardrail_FromGuardrailAttributes(scope constructs.Construct, id *string, attrs *GuardrailAttributes) IGuardrail {
	_init_.Initialize()

	if err := validateGuardrail_FromGuardrailAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IGuardrail

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"fromGuardrailAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func Guardrail_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateGuardrail_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func Guardrail_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateGuardrail_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func Guardrail_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateGuardrail_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return the given named metric for all guardrails.
//
// By default, the metric will be calculated as a sum over a period of 5 minutes.
// You can customize this by using the `statistic` and `period` properties.
// Experimental.
func Guardrail_MetricAll(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateGuardrail_MetricAllParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"metricAll",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

// Return the invocation latency metric for all guardrails.
// Experimental.
func Guardrail_MetricAllInvocationLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateGuardrail_MetricAllInvocationLatencyParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"metricAllInvocationLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Return the invocations metric for all guardrails.
// Experimental.
func Guardrail_MetricAllInvocations(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateGuardrail_MetricAllInvocationsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"metricAllInvocations",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Return the invocations intervened metric for all guardrails.
// Experimental.
func Guardrail_MetricAllInvocationsIntervened(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateGuardrail_MetricAllInvocationsIntervenedParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"metricAllInvocationsIntervened",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Return the text unit count metric for all guardrails.
// Experimental.
func Guardrail_MetricAllTextUnitCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateGuardrail_MetricAllTextUnitCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"metricAllTextUnitCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func Guardrail_PROPERTY_INJECTION_ID() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"@aws-cdk/aws-bedrock-alpha.Guardrail",
		"PROPERTY_INJECTION_ID",
		&returns,
	)
	return returns
}

func (g *jsiiProxy_Guardrail) AddContentFilter(filter *ContentFilter) {
	if err := g.validateAddContentFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addContentFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddContextualGroundingFilter(filter *ContextualGroundingFilter) {
	if err := g.validateAddContextualGroundingFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addContextualGroundingFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddDeniedTopicFilter(filter Topic) {
	if err := g.validateAddDeniedTopicFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addDeniedTopicFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddManagedWordListFilter(filter *ManagedWordFilter) {
	if err := g.validateAddManagedWordListFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addManagedWordListFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddPIIFilter(filter *PIIFilter) {
	if err := g.validateAddPIIFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addPIIFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddRegexFilter(filter *RegexFilter) {
	if err := g.validateAddRegexFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addRegexFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddWordFilter(filter *WordFilter) {
	if err := g.validateAddWordFilterParameters(filter); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addWordFilter",
		[]interface{}{filter},
	)
}

func (g *jsiiProxy_Guardrail) AddWordFilterFromFile(filePath *string, inputAction GuardrailAction, outputAction GuardrailAction, inputEnabled *bool, outputEnabled *bool) {
	if err := g.validateAddWordFilterFromFileParameters(filePath); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addWordFilterFromFile",
		[]interface{}{filePath, inputAction, outputAction, inputEnabled, outputEnabled},
	)
}

func (g *jsiiProxy_Guardrail) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := g.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (g *jsiiProxy_Guardrail) CreateVersion(description *string) *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"createVersion",
		[]interface{}{description},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := g.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		g,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) GetResourceNameAttribute(nameAttr *string) *string {
	if err := g.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		g,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := g.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		g,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) GrantApply(grantee awsiam.IGrantable) awsiam.Grant {
	if err := g.validateGrantApplyParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		g,
		"grantApply",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricInvocationClientErrors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricInvocationClientErrorsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricInvocationClientErrors",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricInvocationLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricInvocationLatencyParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricInvocationLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricInvocations(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricInvocationsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricInvocations",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricInvocationServerErrors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricInvocationServerErrorsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricInvocationServerErrors",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricInvocationsIntervened(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricInvocationsIntervenedParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricInvocationsIntervened",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricInvocationThrottles(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricInvocationThrottlesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricInvocationThrottles",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) MetricTextUnitCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := g.validateMetricTextUnitCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		g,
		"metricTextUnitCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_Guardrail) UpdateVersion(version *string) {
	if err := g.validateUpdateVersionParameters(version); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"updateVersion",
		[]interface{}{version},
	)
}


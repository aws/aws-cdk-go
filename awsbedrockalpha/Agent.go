package awsbedrockalpha

import (
	_init_ "github.com/aws/aws-cdk-go/awsbedrockalpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsevents"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awskms"
	"github.com/aws/constructs-go/constructs/v10"
)

// Class to create (or import) an Agent with CDK.
//
// Example:
//   parserFunction := lambda.NewFunction(this, jsii.String("ParserFunction"), &FunctionProps{
//   	Runtime: lambda.Runtime_PYTHON_3_10(),
//   	Handler: jsii.String("index.handler"),
//   	Code: lambda.Code_FromAsset(jsii.String("lambda")),
//   })
//
//   agent := bedrock.NewAgent(this, jsii.String("Agent"), &AgentProps{
//   	FoundationModel: bedrock.BedrockFoundationModel_AMAZON_NOVA_LITE_V1(),
//   	Instruction: jsii.String("You are a helpful assistant."),
//   	PromptOverrideConfiguration: bedrock.PromptOverrideConfiguration_WithCustomParser(&CustomParserProps{
//   		Parser: parserFunction,
//   		PreProcessingStep: &PromptPreProcessingConfigCustomParser{
//   			StepType: bedrock.AgentStepType_PRE_PROCESSING,
//   			UseCustomParser: jsii.Boolean(true),
//   		},
//   	}),
//   })
//
// Experimental.
type Agent interface {
	AgentBase
	IAgent
	// action groups associated with the ageny.
	// Experimental.
	ActionGroups() *[]AgentActionGroup
	// The ARN of the agent.
	// Experimental.
	AgentArn() *string
	// The unique identifier for the agent.
	// Experimental.
	AgentId() *string
	// The version of the agent.
	// Experimental.
	AgentVersion() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The principal to grant permissions to.
	// Experimental.
	GrantPrincipal() awsiam.IPrincipal
	// Optional KMS encryption key associated with this agent.
	// Experimental.
	KmsKey() awskms.IKey
	// When this agent was last updated.
	// Experimental.
	LastUpdated() *string
	// The name of the agent.
	// Experimental.
	Name() *string
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The IAM role associated to the agent.
	// Experimental.
	Role() awsiam.IRole
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Default alias of the agent.
	// Experimental.
	TestAlias() IAgentAlias
	// Adds an action group to the agent and configures necessary permissions.
	// Default: - Default permissions:
	// - Lambda function invoke permissions if executor is present
	// - S3 GetObject permissions if apiSchema.s3File is present
	//
	// Experimental.
	AddActionGroup(actionGroup AgentActionGroup)
	// Configuration for agent collaboration.
	// Default: - No collaboration configuration.
	//
	// Experimental.
	AddActionGroups(actionGroups ...AgentActionGroup)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Generates a physical name for the agent.
	//
	// Returns: A unique name for the agent with appropriate length constraints.
	// Default: - Generated name format: 'agent-{hash}-{uniqueName}' with:
	// - maxLength: MAXLENGTH_FOR_ROLE_NAME - '-bedrockagent'.length
	// - lower: true
	// - separator: '-'.
	//
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant invoke permissions on this agent to an IAM principal.
	//
	// Returns: An IAM Grant object representing the granted permissions.
	// Default: - Default grant configuration:
	// - actions: ['bedrock:InvokeAgent']
	// - resourceArns: [this.agentArn]
	//
	// Experimental.
	GrantInvoke(grantee awsiam.IGrantable) awsiam.Grant
	// Creates a CloudWatch metric for tracking agent invocations.
	//
	// Returns: A CloudWatch Metric configured for agent invocation counts.
	// Default: - Default metric configuration:
	// - namespace: 'AWS/Bedrock'
	// - metricName: 'Invocations'
	// - dimensionsMap: { AgentId: this.agentId }
	//
	// Experimental.
	MetricCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Creates an EventBridge rule for agent events.
	//
	// Returns: An EventBridge Rule configured for agent events.
	// Default: - Default event pattern:
	// - source: ['aws.bedrock']
	// - detail: { 'agent-id': [this.agentId] }
	//
	// Experimental.
	OnEvent(id *string, options *awsevents.OnEventOptions) awsevents.Rule
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for Agent
type jsiiProxy_Agent struct {
	jsiiProxy_AgentBase
	jsiiProxy_IAgent
}

func (j *jsiiProxy_Agent) ActionGroups() *[]AgentActionGroup {
	var returns *[]AgentActionGroup
	_jsii_.Get(
		j,
		"actionGroups",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) AgentArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"agentArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) AgentId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"agentId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) AgentVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"agentVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) GrantPrincipal() awsiam.IPrincipal {
	var returns awsiam.IPrincipal
	_jsii_.Get(
		j,
		"grantPrincipal",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) KmsKey() awskms.IKey {
	var returns awskms.IKey
	_jsii_.Get(
		j,
		"kmsKey",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) LastUpdated() *string {
	var returns *string
	_jsii_.Get(
		j,
		"lastUpdated",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) Role() awsiam.IRole {
	var returns awsiam.IRole
	_jsii_.Get(
		j,
		"role",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Agent) TestAlias() IAgentAlias {
	var returns IAgentAlias
	_jsii_.Get(
		j,
		"testAlias",
		&returns,
	)
	return returns
}


// Experimental.
func NewAgent(scope constructs.Construct, id *string, props *AgentProps) Agent {
	_init_.Initialize()

	if err := validateNewAgentParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Agent{}

	_jsii_.Create(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAgent_Override(a Agent, scope constructs.Construct, id *string, props *AgentProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		[]interface{}{scope, id, props},
		a,
	)
}

// Creates an Agent reference from an existing agent's attributes.
//
// Returns: An IAgent reference to the existing agent.
// Default: - For attrs.agentVersion: 'DRAFT' if no explicit version is provided
//
// Experimental.
func Agent_FromAgentAttributes(scope constructs.Construct, id *string, attrs *AgentAttributes) IAgent {
	_init_.Initialize()

	if err := validateAgent_FromAgentAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IAgent

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		"fromAgentAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func Agent_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateAgent_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func Agent_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateAgent_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func Agent_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateAgent_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Agent_PROPERTY_INJECTION_ID() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"@aws-cdk/aws-bedrock-alpha.Agent",
		"PROPERTY_INJECTION_ID",
		&returns,
	)
	return returns
}

func (a *jsiiProxy_Agent) AddActionGroup(actionGroup AgentActionGroup) {
	if err := a.validateAddActionGroupParameters(actionGroup); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		a,
		"addActionGroup",
		[]interface{}{actionGroup},
	)
}

func (a *jsiiProxy_Agent) AddActionGroups(actionGroups ...AgentActionGroup) {
	args := []interface{}{}
	for _, a := range actionGroups {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addActionGroups",
		args,
	)
}

func (a *jsiiProxy_Agent) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := a.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		a,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (a *jsiiProxy_Agent) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Agent) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := a.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Agent) GetResourceNameAttribute(nameAttr *string) *string {
	if err := a.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Agent) GrantInvoke(grantee awsiam.IGrantable) awsiam.Grant {
	if err := a.validateGrantInvokeParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		a,
		"grantInvoke",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Agent) MetricCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Agent) OnEvent(id *string, options *awsevents.OnEventOptions) awsevents.Rule {
	if err := a.validateOnEventParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsevents.Rule

	_jsii_.Invoke(
		a,
		"onEvent",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_Agent) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


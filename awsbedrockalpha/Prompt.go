package awsbedrockalpha

import (
	_init_ "github.com/aws/aws-cdk-go/awsbedrockalpha/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awskms"
	"github.com/aws/constructs-go/constructs/v10"
)

// Class to create (or import) a Prompt with CDK.
//
// Prompts are a specific set of inputs that guide Foundation Models (FMs) on Amazon Bedrock to
// generate an appropriate response or output for a given task or instruction.
// You can optimize the prompt for specific use cases and models.
//
// Example:
//   cmk := kms.NewKey(this, jsii.String("cmk"), &KeyProps{
//   })
//   claudeModel := bedrock.BedrockFoundationModel_ANTHROPIC_CLAUDE_SONNET_V1_0()
//
//   variant1 := bedrock.PromptVariant_Text(&TextPromptVariantProps{
//   	VariantName: jsii.String("variant1"),
//   	Model: claudeModel,
//   	PromptVariables: []*string{
//   		jsii.String("topic"),
//   	},
//   	PromptText: jsii.String("This is my first text prompt. Please summarize our conversation on: {{topic}}."),
//   	InferenceConfiguration: bedrock.PromptInferenceConfiguration_Text(&PromptInferenceConfigurationProps{
//   		Temperature: jsii.Number(1),
//   		TopP: jsii.Number(0.999),
//   		MaxTokens: jsii.Number(2000),
//   	}),
//   })
//
//   prompt1 := bedrock.NewPrompt(this, jsii.String("prompt1"), &PromptProps{
//   	PromptName: jsii.String("prompt1"),
//   	Description: jsii.String("my first prompt"),
//   	DefaultVariant: variant1,
//   	Variants: []iPromptVariant{
//   		variant1,
//   	},
//   	KmsKey: cmk,
//   })
//
// See: https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html
//
// Experimental.
type Prompt interface {
	PromptBase
	IPrompt
	// The description of the prompt.
	// Experimental.
	Description() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The KMS key that the prompt is encrypted with.
	// Experimental.
	KmsKey() awskms.IKey
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The ARN of the prompt.
	//
	// Example:
	//   "arn:aws:bedrock:us-east-1:123456789012:prompt/PROMPT12345"
	//
	// Experimental.
	PromptArn() *string
	// The ID of the prompt.
	//
	// Example:
	//   "PROMPT12345"
	//
	// Experimental.
	PromptId() *string
	// The name of the prompt.
	// Experimental.
	PromptName() *string
	// The version of the prompt.
	// Experimental.
	PromptVersion() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// The variants of the prompt.
	// Experimental.
	Variants() *[]IPromptVariant
	// Adds a prompt variant to the prompt.
	// Experimental.
	AddVariant(variant IPromptVariant)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Creates a prompt version, a static snapshot of your prompt that can be deployed to production.
	//
	// Returns: A PromptVersion object containing the version details including ARN and version string.
	// Default: - No description provided.
	//
	// Experimental.
	CreateVersion(description *string) PromptVersion
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the given identity permissions to get the prompt.
	//
	// Returns: An IAM Grant object representing the granted permissions.
	// Default: - Default grant configuration:
	// - actions: ['bedrock:GetPrompt']
	// - resourceArns: [this.promptArn]
	//
	// Experimental.
	GrantGet(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for Prompt
type jsiiProxy_Prompt struct {
	jsiiProxy_PromptBase
	jsiiProxy_IPrompt
}

func (j *jsiiProxy_Prompt) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) KmsKey() awskms.IKey {
	var returns awskms.IKey
	_jsii_.Get(
		j,
		"kmsKey",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) PromptArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"promptArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) PromptId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"promptId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) PromptName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"promptName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) PromptVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"promptVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Prompt) Variants() *[]IPromptVariant {
	var returns *[]IPromptVariant
	_jsii_.Get(
		j,
		"variants",
		&returns,
	)
	return returns
}


// ****************************************************************************                           CONSTRUCTOR ***************************************************************************.
// Experimental.
func NewPrompt(scope constructs.Construct, id *string, props *PromptProps) Prompt {
	_init_.Initialize()

	if err := validateNewPromptParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Prompt{}

	_jsii_.Create(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// ****************************************************************************                           CONSTRUCTOR ***************************************************************************.
// Experimental.
func NewPrompt_Override(p Prompt, scope constructs.Construct, id *string, props *PromptProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		[]interface{}{scope, id, props},
		p,
	)
}

// Creates a Prompt reference from an existing prompt's attributes.
//
// Returns: An IPrompt reference to the existing prompt.
// Default: - For attrs.promptVersion: 'DRAFT' if no explicit version is provided
//
// Experimental.
func Prompt_FromPromptAttributes(scope constructs.Construct, id *string, attrs *PromptAttributes) IPrompt {
	_init_.Initialize()

	if err := validatePrompt_FromPromptAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IPrompt

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		"fromPromptAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func Prompt_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validatePrompt_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func Prompt_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePrompt_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func Prompt_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePrompt_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Prompt_PROPERTY_INJECTION_ID() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"@aws-cdk/aws-bedrock-alpha.Prompt",
		"PROPERTY_INJECTION_ID",
		&returns,
	)
	return returns
}

func (p *jsiiProxy_Prompt) AddVariant(variant IPromptVariant) {
	if err := p.validateAddVariantParameters(variant); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"addVariant",
		[]interface{}{variant},
	)
}

func (p *jsiiProxy_Prompt) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := p.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (p *jsiiProxy_Prompt) CreateVersion(description *string) PromptVersion {
	var returns PromptVersion

	_jsii_.Invoke(
		p,
		"createVersion",
		[]interface{}{description},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_Prompt) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_Prompt) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := p.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_Prompt) GetResourceNameAttribute(nameAttr *string) *string {
	if err := p.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_Prompt) GrantGet(grantee awsiam.IGrantable) awsiam.Grant {
	if err := p.validateGrantGetParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		p,
		"grantGet",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_Prompt) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

